pipeline {
    agent {
        kubernetes {
            label 'github_deployment'
			defaultContainer 'xc16-mplabx-sonar-fmpp-python'
            yamlFile '.citd/cloudprovider.yml'
        }
    }
   

	environment {
	    NOTIFICATION_EMAIL = 'e50beea8.microchip.com@amer.teams.ms'	
		//This is the BitBucket source repo URL to be deployed
		BITBUCKET_SOURCE_URL = 'https://bitbucket.microchip.com/scm/mcu16ce/pic24fj64gu205-curiosity-nano-oob.git'
		BITBUCKET_CREDENTIAL_ID = 'BITBUCKET_INTERNAL_TOKEN'
		GITHUB_PRODUCTION_DEPLOY_URL ='https://github.com/microchip-pic-avr-examples'
		GITHUB_TEST_DEPLOY_URL ='https://github.com/mchpTestArea'
		//Selects the deployment URL(production or test) based on the merge target branch, selects "microchip-pic-avr-examples" if target branch is "master" , if target branch is "test_deploy" selects "mchpTestArea" else null
		GITHUB_URL = getGitHubUrl("${GITHUB_PRODUCTION_DEPLOY_URL}","${GITHUB_TEST_DEPLOY_URL}")
		GITHUB_PRODUCTION_DEPLOY_CREDENTIAL_ID ='GITHUB_MICROCHIP_PIC_AVR_EXAMPLES_TOKEN'
		GITHUB_TEST_DEPLOY_CREDENTIAL_ID ='GITHUB_PIC_AVR_TEST_TOKEN'
		//Gets the Github credential id based on the deployment organization
	    GITHUB_CREDENTIAL_ID = getGitHubCredentialId("${GITHUB_URL}","${GITHUB_PRODUCTION_DEPLOY_URL}","${GITHUB_TEST_DEPLOY_URL}","${GITHUB_PRODUCTION_DEPLOY_CREDENTIAL_ID}","${GITHUB_TEST_DEPLOY_CREDENTIAL_ID}")
		//Files or folders to be excluded from deployment, if multiple files or folders use comma separator
		DEPLOY_EXCLUDE_FOLDER_FILE_LIST = 'mchp_private'
		//Branch(s) to be deployed, if multiple branches use comma separator. ${env.BRANCH_NAME} is the target branch of the PR.
		DEPLOY_BRANCH_LIST = "${env.BRANCH_NAME}"
		CHANGE_LOG_PATH = 'changelog.md'
		SOURCE_PROJECT_META_DATA = '.main-meta/main.json'
		DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git'
	}

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }
		
		stage('Configuration file update') {
            steps {
                script {      
                    execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-project-generator.git")
                    
                    MPLABX_PATH= sh (script: 'update-alternatives --list MPLABX_PATH',returnStdout: true).trim()
                    def packsDirectory = "${MPLABX_PATH}/packs"    
                    
                    XC16_PATH= sh (script: 'update-alternatives --list xc16-gcc',returnStdout: true).trim()
                    def xc16Version = XC16_PATH.split('/')[4].substring(1)
                    
                    XC32_PATH= sh (script: 'update-alternatives --list xc32-gcc',returnStdout: true).trim()
                    def xc32Version = XC32_PATH.split('/')[4].substring(1)
                        
                    execute("cd ./tool-mplabx-c-project-generator && node configGenerator.js sp=../ v16=${xc16Version} v32=${xc32Version} -ol=${params.COMPILER_OPTIMIZATION_LEVEL} packs=${packsDirectory}")
                }
            }
        }

        stage('Build') {
            steps {
                script {
                   execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-build.git")
                   execute("cd ./tool-mplabx-c-build && node buildLauncher.js sp=../ rp=./output genMK=true")
               }
            }
        }
	   
	    // Cloning the tool used for GitHub deployment
	   	stage('GitHub tool clone'){
            steps{
               script{
                    execute("git clone https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git")
                    execute("chmod +x ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py")                    
                }
            }
        } 
		
		
	    // Validate main.json file
	   	stage('Validate main.json'){
            steps{
               script{
                    execute("python tool-github-deploy/tool-github-deploy/tool-github-deploy.py -vdo=true -vmf=${env.SOURCE_PROJECT_META_DATA} -vjsf=tool-github-deploy/tool-github-deploy/json/json_schema.json")                    
                }
            }
        }
		
		// Creating tag in Bitbucket repo
	   	stage('Bitbucket Tag Creation'){
			when {
                    anyOf {
                        allOf {
                            not { changeRequest() }
                            anyOf {branch 'master';}
                        }
                    }
            }
            steps{
               script{
                    def jsonObj = readJsonObject();
                    
                    withCredentials([usernamePassword(credentialsId: "${env.BITBUCKET_CREDENTIAL_ID}", passwordVariable: 'PASS', usernameVariable: 'USER_NAME')]) {
                        execute("python tool-github-deploy/tool-github-deploy/tool-github-deploy.py -bto=true -rpn=\"${jsonObj.content.projectName}\" -bid=$USER_NAME -bpat=$PASS -bpn=MCU16CE -btv=\"${jsonObj.content.version}\" -bch=${env.GIT_COMMIT} -btd=\"${jsonObj.content.version}\"")
                    }
                }
            }
        }
		
	    // GitHub repo creation 
	    stage('GitHub Repo Creation'){
			when {
                    anyOf {
                        allOf {
                            not { changeRequest() }
                            anyOf {branch 'master'; branch 'test_deploy';}
                        }
                    }
            }
            steps{
                script{
                    def jsonObj = readJsonObject();
                    
                    String [] topics = jsonObj.content.keywords
                    def asString = topics.join(", ")
					Boolean visibility =  true
					if(env.GITHUB_URL == env.GITHUB_PRODUCTION_DEPLOY_URL)
					{
					   visibility = false
					}
                    
                    withCredentials([usernamePassword(credentialsId: "${env.GITHUB_CREDENTIAL_ID}", passwordVariable: 'PASS', usernameVariable: 'USER_NAME')]) {
                        execute("python tool-github-deploy/tool-github-deploy/tool-github-deploy.py -rpo=true -gpat=$PASS -rporg=${env.GITHUB_URL} -rpn=${jsonObj.content.projectName} -rpd=\"${jsonObj.content.shortDescription}\" -rpt=\"${asString}\" -rpp=${visibility}")
                    }
                }
            }
        } 
	
	    // Deploying the code to GitHub 
		stage('GitHub Deploy Source'){
			when {
                    anyOf {
                        allOf {
                            not { changeRequest() }
                            anyOf {branch 'master'; branch 'test_deploy';}
                        }
                    }
            }
            steps{
                script{
                    def jsonObj = readJsonObject();
                    def gitHubUrl = "${env.GITHUB_URL}" + "/" + jsonObj.content.projectName
                    gitHubUrl = gitHubUrl.replace(" ", "").replace("\n", "")
                    
                    withCredentials([usernamePassword(credentialsId: "${env.GITHUB_CREDENTIAL_ID}", passwordVariable: 'PASS', usernameVariable: 'USER_NAME')]) {
                        execute("python tool-github-deploy/tool-github-deploy/tool-github-deploy.py -deploy=true -gpat=$PASS -dgid=$USER_NAME -dburl=${env.BITBUCKET_SOURCE_URL} -dgurl=${gitHubUrl}  -dbranch=${env.DEPLOY_BRANCH_LIST} -def=${env.DEPLOY_EXCLUDE_FOLDER_FILE_LIST}")
                    }
                }
            }
        }
		
		// Creating GitHub release  
		stage('GitHub release'){
			when {
                    anyOf {
                        allOf {
                            not { changeRequest() }
                            anyOf {branch 'master'; branch 'test_deploy';}
                        }
                    }
            }
            steps{
               script{
                    def jsonObj = readJsonObject();
                    
                    withCredentials([usernamePassword(credentialsId: "${env.GITHUB_CREDENTIAL_ID}", passwordVariable: 'PASS', usernameVariable: 'USER_NAME')]) {
                        execute("python tool-github-deploy/tool-github-deploy/tool-github-deploy.py -rlo=true -gpat=$PASS -rporg=${env.GITHUB_URL} -rpn=\"${jsonObj.content.projectName}\" -rltv=\"${jsonObj.content.version}\" -rltt=\"${jsonObj.content.version}\" -rlnp=${env.CHANGE_LOG_PATH}")
                    }
                }
            }
        }
		
		//Deploying the Github content to portal
		stage('Portal-Deploy') {
			when {
				allOf {
                    not { changeRequest() }
                    anyOf {branch 'master';}
                }
			}
			steps {
				script {
					def jsonObj = readJsonObject();			
					def version = jsonObj.content.version
					def project = jsonObj.content.projectName
					
                    String[] splitPreTag = "${env.GITHUB_URL}".split("/")
                    def gitHubOrg = (splitPreTag[splitPreTag.size() - 1])

					def cmdArgs = "'{\"repoOwnerName\":\"$gitHubOrg\",\"repoName\":\"$project\",\"tagName\":\"$version\"}'"
					cmdArgs = cmdArgs.replaceAll("\"","\\\\\"")						
					
					execute("git clone https://bitbucket.microchip.com/scm/portal/bundles.git")
					execute("cd bundles && chmod 755 ./portal-client-cli-linux")
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-portal-client-launcher.git")
					execute("cd tool-portal-client-launcher && node portalLauncher.js -app=../bundles/portal-client-cli-linux -cmd=\"uploadGitHub ${cmdArgs}\"")
				}
			}
		}
        
      }

    post {
        success{
            script {
                if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {
				    archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", fingerprint: true
                    mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${env.NOTIFICATION_EMAIL}",
                    subject: "Successful Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Something is right with ${env.BUILD_URL}"
                } else {
				    archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", fingerprint: true
                    mail to: "${env.NOTIFICATION_EMAIL}",
                    subject: "Successful Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Something is right with ${env.BUILD_URL}"
                }
            }
        }
        failure {
            script {
                if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {
				    archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", fingerprint: true
                    mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${env.NOTIFICATION_EMAIL}",
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Pipeline failure. ${env.BUILD_URL}"
                } else {
				    archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", fingerprint: true
                    mail to: "${env.NOTIFICATION_EMAIL}",
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Pipeline failure. ${env.BUILD_URL}"
                }
            }
        }
    }
}

def execute(String command) {
    if (isUnix()) {
        sh command
    } else {
        bat command
    }
}

String readJsonObject() {
    def jsonObj  = readJSON interpolate: true, file: "${env.SOURCE_PROJECT_META_DATA}"
    return jsonObj
}
def getGitHubUrl(String productionUrl, String testDeployUrl) {
    String branchName = "${env.BRANCH_NAME}";
    if(branchName == 'master') {
        return productionUrl;
    } else if(branchName == 'test_deploy') {
        return testDeployUrl;
    } else {
        return null
    }
}
def getGitHubCredentialId(String deployUrl, String productionDeployUrl, String testDeployUrl, String githubProductionDeployCredential, String githubTestDeployCredential) {    
    if(deployUrl == productionDeployUrl) {
        return githubProductionDeployCredential;
    } else if(deployUrl == testDeployUrl) {
        return githubTestDeployCredential;
    } else {
        return null
    }
}